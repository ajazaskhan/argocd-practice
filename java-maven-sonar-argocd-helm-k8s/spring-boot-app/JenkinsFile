pipeline {
    agent {
        label 'maven'
    }

    stages {
        stage('Checkout') {
            steps {
                echo 'Starting Checkout stage'
                echo 'Passed'
            }
        }

        stage('Build and Test') {
            steps {
                echo 'Starting Build and Test stage'
                sh 'ls -ltr'
                sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn clean package'
            }
        }

        stage('Static Code Analysis') {
            environment {
                SONAR_URL = "http://44.206.224.247:9000"
            }
            steps {
                echo 'Starting Static Code Analysis stage'
                try {
                    withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
                        sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}'
                    }
                } catch (Exception e) {
                    echo "Error during Static Code Analysis: ${e.message}"
                    currentBuild.result = 'FAILURE'
                    error("Failed to perform Static Code Analysis")
                }
            }
        }

        stage('Build and Push Docker Image') {
            environment {
                DOCKER_IMAGE = "ajaz9565/argocd-app:${BUILD_NUMBER}"
                REGISTRY_CREDENTIALS = credentials('docker-cred')
            }
            steps {
                echo 'Starting Build and Push Docker Image stage'
                script {
                    try {
                        dir('java-maven-sonar-argocd-helm-k8s/spring-boot-app') {
                            sh "docker build -t ${DOCKER_IMAGE} ."
                        }
                        def dockerImage = docker.image("${DOCKER_IMAGE}")
                        docker.withRegistry('https://index.docker.io/v1/', "docker-cred") {
                            dockerImage.push()
                        }
                    } catch (Exception e) {
                        echo "Error during Build and Push Docker Image: ${e.message}"
                        currentBuild.result = 'FAILURE'
                        error("Failed to build and push Docker image")
                    }
                }
            }
        }

        stage('Update Deployment File') {
            environment {
                GIT_REPO_NAME = "argocd-practice"
                GIT_USER_NAME = "ajazaskhan"
            }
            steps {
                echo 'Starting Update Deployment File stage'
                script {
                    try {
                        withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
                            sh '''
                                git config user.email "anisshaikh1439@gmail.com"
                                git config user.name "ajazaskhan"
                                BUILD_NUMBER=${BUILD_NUMBER}
                                sed -i "s/replaceImageTag/${BUILD_NUMBER}/g" java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
                                git add java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
                                git commit -m "Update deployment image to version ${BUILD_NUMBER}"
                                git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
                            '''
                        }
                    } catch (Exception e) {
                        echo "Error during Update Deployment File: ${e.message}"
                        currentBuild.

